drop database if exists coj;

-- 创建库
create database if not exists coj;

-- 切换库
use coj;

-- 用户表
create table if not exists user
(
    id            bigint auto_increment comment 'id' primary key,
    user_account  varchar(256)                           not null comment '账号',
    user_password varchar(512)                           not null comment '密码',
    user_name     varchar(256)                           null comment '用户昵称',
    user_avatar   varchar(1024)                          null comment '用户头像',
    user_profile  varchar(512)                           null comment '用户简介',
    user_role     varchar(256) default 'user'            not null comment '用户角色：user/admin/ban',
    create_time   datetime     default CURRENT_TIMESTAMP not null comment '创建时间',
    update_time   datetime     default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间',
    is_delete     tinyint      default 0                 not null comment '是否删除'
) comment '用户' collate = utf8mb4_unicode_ci;

drop table if exists question;
-- 题目表
create table if not exists question
(
    id           bigint auto_increment comment 'id' primary key,
    title        varchar(512)                       null comment '标题',
    content      text                               null comment '内容',
    tags         varchar(1024)                      null comment '标签列表（json 数组）',
    answer       text                               null comment '题目答案',
    submit_num   int      default 0                 not null comment '题目提交数',
    accepted_num int      default 0                 not null comment '题目通过数',
    judge_case   text                               null comment '判题用例(JSON 数组)',
    judge_config text                               null comment '判题配置(JSON 数组)',
    user_id      bigint                             not null comment '创建用户 id',
    create_time  datetime default CURRENT_TIMESTAMP not null comment '创建时间',
    update_time  datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间',
    is_delete    tinyint  default 0                 not null comment '是否删除',
    index idx_userId (user_id)
) comment '题目表' collate = utf8mb4_unicode_ci;

drop table if exists question_submit;
-- 题目提交表
create table if not exists question_submit
(
    id            bigint auto_increment comment 'id' primary key,
    language      varchar(128)                       not null comment '编程语言',
    code          text                               not null comment '用户代码',
    judge_info    text                               null comment '判题信息(JSON 对象)',
    error_message text                               null comment '错误详情',
    status        int      default 0                 not null comment '判题状态,0-待判题,1-判题中,2-成功,3-失败',
    question_id   bigint                             not null comment '题目id',
    user_id       bigint                             not null comment '创建用户 id',
    create_time   datetime default CURRENT_TIMESTAMP not null comment '创建时间',
    update_time   datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间',
    is_delete     tinyint  default 0                 not null comment '是否删除',
    index idx_userId (user_id),
    index idx_questionId (question_id)
) comment '题目提交表';


INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (1, 'A + B Problem', '<p>Calculate A + B，and give me the answer!</p><p>Input two integers A and B,<b> process to the end of the file. </b>(Watch the Sample Input)</p><p>For each case, output A + B in one line.(Watch the Sample Output)</p>', '["Math"]', null, 302827, 169190, '[{"input":"1 1","output":"2\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:35', '2024-08-28 17:11:35', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (5, 'N进制小数', '<p>编写程序实现将任意10进制正小数m转换成n进制的正小数，小数点后保留10位小数。</p><p>输入包含两个数m,n，用空格隔开。<b>输入包含多组测试，当m,n都为0时输入结束。</b></p><p>Limits:</p><pre><code>0.0000009&lt;m&lt;1
1&lt;n&lt;10
</code></pre><p>输出10进制正小数m的n进制小数。结果保留10位小数。</p>', '["Math","Decimals"]', null, 154329, 80387, '[{"input":"0.795 3\\n0 0","output":"0.2101101122\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:36', '2024-08-28 17:11:36', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (7, 'Words', '<p>每个句子由多个单词组成，句子中的每个单词的长度都可能不一样，我们假设每个单词的长度Ni为该单词的重量，你需要做的就是给出整个句子的平均重量V。</p><p>输入只有一行，包含一个字符串S(长度不会超过100)，代表整个句子，句子中只包含大小写的英文字母，每个单词之间有一个空格。</p><p>输出句子S的平均重量V(四舍五入保留两位小数)。</p>', '["String"]', null, 183419, 115408, '[{"input":"Who Love Solo\\n","output":"3.67\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:36', '2024-08-28 17:11:36', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (8, 'Standings', '<p>solo发现他参加Online Judge的比赛表现很不稳定，于是他翻开历史记录，发现他在每一轮的比赛中他的排名R都能整除参赛人数N(包括solo)，于是他每次参赛都会先预测他的排名情况，以给自己更大的自信。</p><p>输入只有一个整数N(0&lt;N&lt;10<sup>9</sup>)，代表参赛人数。</p><p>在一行输出solo参赛可能的获得的排名数S以及由小到大输出各个排名R<sub>i</sub> (0&lt;i ≤ S)，用空格隔开。</p>', '["Number"]', null, 135645, 78225, '[{"input":"10","output":"4 1 2 5 10"}]', '{"timeLimit":15000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:36', '2024-08-28 17:11:36', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (9, 'Consecutive Integer', '<p>2005年的百度之星初赛有这么一道题，一个正整数有可能可以被表示为 m(m&gt;1) 个连续正整数之和，如：</p><pre><code>15=1+2+3+4+5
15=4+5+6
15=7+8
</code></pre><p>但现在你的任务是判断给定的整数n能否表示成连续的m(m&gt;1)个正整数之和。</p><p>输入只有一个整数n (1&lt;n&lt;2<sup>30</sup> +1)。</p><p>若n能表示成连续的m(m&gt;1)个正整数之和则输出“YES”，否则输出“NO”。</p>', '["Number Theory"]', null, 250225, 78455, '[{"input":"15","output":"YES"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:37', '2024-08-28 17:11:37', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (10, 'Vowel', '<p>solo从小就对英文字母非常感兴趣，尤其是元音字母(a,e,i,o,u,A,E,I,O,U)，他在写日记的时候都会把元音字母写成大写的，辅音字母则都写成小写，虽然别人看起来很别扭，但是solo却非常熟练。你试试把一个句子翻译成solo写日记的习惯吧。</p><p>输入一个字符串S(长度不超过100，只包含大小写的英文字母和空格)。</p><p>按照solo写日记的习惯输出翻译后的字符串S。</p>', '["String"]', null, 110162, 80454, '[{"input":"Who Love Solo","output":"whO lOvE sOlO"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:37', '2024-08-28 17:11:37', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (11, 'Olympic Game', '<p>2012伦敦奥运会即将到来，大家都非常关注奖牌榜的情况，现在我们假设奖牌榜的排名规则如下：</p><pre><code>1、首先gold medal数量多的排在前面；
2、其次silver medal数量多的排在前面；
3、然后bronze medal数量多的排在前面；
4、若以上三个条件仍无法区分名次，则以国家名称的字典序排定。
</code></pre><p>我们假设国家名称不超过20个字符、各种奖牌数不超过100，且大于等于0。</p><p>第一行输入一个整数N(0&lt;N&lt;21)，代表国家数量;<br />然后接下来的N行，每行包含一个字符串Namei表示每个国家的名称，和三个整数G<sub>i</sub>、S<sub>i</sub>、B<sub>i</sub>表示每个获得的gold medal、silver medal、bronze medal的数量，以空格隔开，如(China 51 20 21)，具体见样例输入。</p><p>输出奖牌榜的依次顺序，只输出国家名称，各占一行，具体见样例输出。</p>', '["Sorting"]', null, 132565, 69786, '[{"input":"5\\nChina 32 28 34\\nEngland 12 34 22\\nFrance 23 33 2\\nJapan 12 34 25\\nRusia 23 43 0","output":"China\\nRusia\\nFrance\\nJapan\\nEngland\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:37', '2024-08-28 17:11:37', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (12, 'Word Maze', '<p>Word Maze 是一个网络小游戏，你需要找到以字母标注的食物，但要求以给定单词字母的顺序吃掉。假设给定单词if，你必须先吃掉i然后才能吃掉f。<br />但现在你的任务可没有这么简单，你现在处于一个迷宫Maze（n×m的矩阵）当中，里面到处都是以字母标注的食物，但你只能吃掉能连成给定单词W的食物。</p><p>注意区分英文字母大小写,并且你只能上下左右行走。</p><p>输入第一行包含两个整数n、m(0&lt;n,m&lt;21)分别表示n行m列的矩阵，第二行是长度不超过100的单词W，从第3行到第n+2行是只包含大小写英文字母的长度为m的字符串。</p><p>如果能在地图中连成给定的单词，则输出“YES”，否则输出“NO”。注意：每个字母只能用一次。</p>', '["DFS and Similar"]', null, 101539, 47450, '[{"input":"5 5\\nSOLO\\nCPUCY\\nEKLQH\\nCRSOL\\nEKLQO\\nPGRBC","output":"YES\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:38', '2024-08-28 17:11:38', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (13, 'Table', '<p>上图是一个Mysql查询结果图，我们看到这个表格非常漂亮，只需要使用”+”和”-”两个符号就可以打印，现在你的任务是打印一个n×m的表格我们定义单位长度（水平方向有三个”-”，竖直方向有一个”| ”，”|”对齐”+”）的矩形表格为</p><p>输入只有一行包含两个整数n和m(0&lt;n,m&lt;13)。</p><p>输出n×m的表格。</p>', '["Implementation"]', null, 102411, 74690, '[{"input":"1 1","output":"+---+\\n|   |\\n+---+\\n"},{"input":"1 2","output":"+---+---+\\n|   |   |\\n+---+---+\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:38', '2024-08-28 17:11:38', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (15, 'A+B Problem Plus', '<p>I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.</p><p>The first line of the input contains an integer T(1≤T≤20) which means the number of test cases.<br />Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large,that means you should not process them by using 32-bit integer.You may assume the length of each integer will not exceed 1000.</p><p>For each test case, you should output two lines. The first line is &quot;Case #:&quot;, # means the number of the test case. The second line is the an equation &quot;A + B = Sum&quot;, Sum means the result of A + B.Note there are some spaces int the equation. Output a blank line between two test cases.</p>', '["Big Number"]', null, 102717, 57188, '[{"input":"2\\n1 2\\n112233445566778899 998877665544332211","output":"Case 1:\\n1 + 2 = 3\\n\\nCase 2:\\n112233445566778899 + 998877665544332211 = 1111111111111111110"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:38', '2024-08-28 17:11:38', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (16, 'A-B Problem Plus', '<p>I have a very simple problem for you again. Given two integers A and B, your job is to calculate the result of A - B.</p><p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases.<br />Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large,that means you should not process them by using 32-bit integer.<br />You may assume the length of each integer will not exceed 1000.</p><p>For each test case, you should output two lines. The first line is &quot;Case #:&quot;, # means the number of the test case. The second line is the an equation &quot;A - B = ?&quot;, ? means the result of A - B.Note there are some spaces int the equation. Output a blank line between two test cases.</p>', '["Big Number"]', null, 70570, 43569, '[{"input":"3\\n9 8\\n12 8\\n123456789 987654321","output":"Case 1:\\n9 - 8 = 1\\n\\nCase 2:\\n12 - 8 = 4\\n\\nCase 3:\\n123456789 - 987654321 = -864197532\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:39', '2024-08-28 17:11:39', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (17, 'A×B Problem', '<p>I have a very simple problem for you. Given two integers A and B, your job is to multiply the product is of A × B.</p><p>Each line will contain two integers A and B. Process to end of file.Notice that the integers are very large,that means you should not process them by using 32-bit integer.<br />You may assume the<strong style=""> length</strong> of each integer will not exceed 1000.</p><p>For each case, output the product is of A × B in one line.</p>', '["Big Number"]', null, 68992, 45969, '[{"input":"1 2\\n3 11\\n14512451451245124512 15125125124512451245","output":"2\\n33\\n219502644063494817653152060344354417440"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:39', '2024-08-28 17:11:39', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (19, 'N! Plus', '<p>Given an integer N(0 ≤ N ≤ 10000), your task is to calculate N!.</p><p>One N in one line.</p><p>For each N, output N! in one line.</p>', '["Big Number"]', null, 99459, 47021, '[{"input":"3","output":"6\\n"}]', '{"timeLimit":5000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:39', '2024-08-28 17:11:39', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (20, 'Exponentiation', '<p>Problems involving the computation of exact values of very large magnitude and precision are common. For example, the computation of the national debt is a taxing experience for many computer systems.<br />This problem requires that you write a program to compute the exact value of R<sup>n</sup> where R is a real number ( 0.0 &lt; R &lt; 99.999 ) and n is an integer such that 0 &lt; n ≤ 25.</p><p>The input will consist of a set of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9.</p><p>The output will consist of one line for each line of input giving the exact value of R<sup>n</sup>. Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. Don&#039;t print the decimal point if the result is an integer.</p>', '["Big Number"]', null, 39697, 32880, '[{"input":"95.123 12\\n0.4321 20\\n5.1234 15\\n6.7592  9\\n98.999 10\\n1.0100 12","output":"548815620517731830194541.899025343415715973535967221869852721\\n.00000005148554641076956121994511276767154838481760200726351203835429763013462401\\n43992025569.928573701266488041146654993318703707511666295476720493953024\\n29448126.764121021618164430206909037173276672\\n90429072743629540498.107596019456651774561044010001\\n1.126825030131969720661201\\n"}]', '{"timeLimit":4999,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:40', '2024-08-28 17:11:40', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (21, '最小公倍数 Plus', '<p>为什么1小时有60分钟，而不是100分钟呢？这是历史上的习惯导致。但也并非纯粹的偶然：60是个优秀的数字，它的因子比较多。事实上，它是1至6的每个数字的倍数。即1,2,3,4,5,6都是可以除尽60。<br />我们希望寻找到能除尽1至n的的每个数字的最小整数。</p><p>输入一个整数n,(1&lt;n&lt;=100），测试包含组样例，<b>读到文件末尾结束</b>。</p><p>输出求1至n的最小公倍数。</p>', '["Big Number"]', null, 52728, 43562, '[{"input":"6\\n10\\n100","output":"60\\n2520\\n69720375229712477164533808935312303556800"}]', '{"timeLimit":6000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:40', '2024-08-28 17:11:40', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (22, 'Prime Plus', '<p>Write a program which reads an integer n and prints the number of prime numbers which are less than or equal to n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5, 7.</p><p>Input only has an integer n (0&lt;n&lt;100000001) in a line</p><p>Prints the number of prime numbers</p>', '["Math"]', null, 61987, 30229, '[{"input":"6","output":"3"}]', '{"timeLimit":5000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:40', '2024-08-28 17:11:40', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (23, '最大公约数 Plus', '<p>从n个不同元素中，任取m(m≤n)个元素并成一组，叫做从n个不同元素中取出m个元素的一个组合；从n个不同元素中取出m(m≤n)个元素的所有组合的个数，叫做从n个不同元素中取出m个元素的组合数，用符号c(n,m)表示。<br />计算公式为：c(n,m)=n!/((n-m)!×m!)<br />现在你的任务是求出C(2n,1),C(2n,3),C(2n,5),…,C(2n,2n-1)的最大公约数。  </p><p>输入只有一个整数n(1&lt;n&lt;=10000)。</p><p>输出C(2n,1),C(2n,3),C(2n,5),…,C(2n,2n-1)的最大公约数。</p>', '["Math"]', null, 41461, 23645, '[{"input":"3","output":"2"}]', '{"timeLimit":5000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:40', '2024-08-28 17:11:40', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (24, 'The Simple Problem', '<p>Solo上了大学，对数学很感兴趣，有一天他面对数分三，一个Sequence(数列)摆在了他面前，这可难住他了……<br />序列如下：S(a,k,n)=a+(k+a)+(2k+a)+...+(nk+a)，题目要他对序列求和，但是a、k、n的取值好多，他不知如何是好，于是他决定写个程序……<br />Can you get it?  </p><p>题目数据范围：</p><pre><code>0&lt;=a&lt;=100.
0&lt;=k&lt;=100.
0&lt;=n&lt;=100.
</code></pre><p>输入只有一行，包含三个整数a、k和n。</p><p>根据输入的a、k和n，输出S(a,k,n)的值。</p>', '["Math"]', null, 74440, 63139, '[{"input":"1 2 4","output":"25\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:41', '2024-08-28 17:11:41', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (25, 'Red And Green', '<p>在美丽的尧山，有一个大广场，50周年校庆的时候Solo就在大广场上见证了史上最壮观的焰火。<br />在广场上有一排方砖是有颜色的，被涂上红色或者绿色，从左到右排列。现在校方要求重新喷涂颜色，但不一定要每一块方砖都重新喷涂，因为校方的目的是：每一块红色的方砖都至少在绿色方砖的左边（也就是每一个红的左边不能有绿的），并且尽量喷涂最少的次数。</p><p>输入只有一行，包含一个字符串S，且只包含&#039;R&#039;(代表红色)或者&#039;G&#039;(代表绿色)。<br />我们保证字符串S的长度L的范围是(0 < L < 50 )。</p><p>输出需要重新喷涂的方砖的最少数量。</p>', '["DP"]', null, 62673, 31425, '[{"input":"RGRGR","output":"2"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:41', '2024-08-28 17:11:41', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (26, 'Who Love Solo Again', '<p>输入一个英文句子，句子中仅包含英文字母，<b>数字</b>，空格和标点符号，其中数字、空格和标点符号将句子划分成一个个独立的单词，除去句子中的数字、空格和标点符号，将句子中的每个单词的首字母大写，然后输出句子，输出时各个单词之间以一个空格隔开，<b>句子以“.”结束</b></p><p>输入只有一行，包含一个长度都不超过100的字符串S，表示英文句子。</p><p>输出只有一行，即按要求输出处理后的英文句子，若句子中不含任何单词，则输出一个“.”。</p>', '["String"]', null, 74321, 38117, '[{"input":"Who love?, Solo..\\n","output":"Who Love Solo.\\n"},{"input":"----Who,love???Solo","output":"Who Love Solo.\\n"},{"input":"66666666664123+Who-32didn\'t love? Solo32..","output":"Who Didn T Love Solo.\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:41', '2024-08-28 17:11:41', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (27, 'Calculator', '<p>Solo小学一年级的时候做数学题很莫名奇妙，经常把算术表达式加上很多空格（如：7+ 31    -2），让老师很是头大，于是老师决定雇用你编写一个程序来独立计算Solo的答案。Can you help the teacher?</p><p>输入只有一行，即一个长度不超过100的字符串S，表示Solo的算术表达式，且S只包含数字和”+”、”-”两种运算符，以及Solo加上的一大堆空格（我们保证输入都是合法的）。<br />注意：S中不一定包含运算符，且我们保证S中不会出现大于100000的数。</p><p>输出表达式的运算结果。</p>', '["Number"]', null, 52405, 37478, '[{"input":"1+2 + 3 +   4","output":"10\\n"}]', '{"timeLimit":5000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:42', '2024-08-28 17:11:42', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (28, 'Candy', '<p>Solo和koko是两兄弟，妈妈给了他们一大袋糖，每块糖上都有自己的重量。现在他们想要将这些糖分成两堆。分糖的任务当然落到了大哥Solo的身上，然而koko要求必须两个人获得的糖的总重量“相等”（根据Koko的逻辑），要不然就会哭的。<br />非常不幸的是，koko还非常小，并且他只会先将两个数转成二进制再进行加法，而且总会忘记进位。如当12（1100）加5（101）时：</p><pre><code> 1100
+0101 
-----
 1001
</code></pre><p>于是koko得到的计算结果是9（1001）。</p><p>此外还有一些例子：</p><pre><code>5 + 4 = 1
7 + 9 = 14
50 + 10 = 56
</code></pre><p>（事实上，这正是异或运算:12^5=9,5^4=1…）<br />现在Solo非常贪婪，他想要尽可能使自己得到的糖的总重量最大，且不让koko哭。</p><p>输入的第一行是一个整数N(2 ≤ N ≤ 15)，表示有袋中多少块糖。第二行包含N个用空格分开的整数C<sub>i</sub> (1 ≤ C<sub>i</sub> ≤ 10<sup>6</sup>)，表示第i块糖的重量。</p><p>如果能让koko不哭，输出Solo所能获得的糖的总重量，否则输出“NO”。</p>', '["Math"]', null, 35670, 30133, '[{"input":"3\\n3 5 6","output":"11\\n"},{"input":"5\\n1 2 3 4 5","output":"NO\\n"},{"input":"8\\n7258 6579 2602 6716 3050 3564 5396 1773","output":"35165\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:42', '2024-08-28 17:11:42', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (30, '字符串重排', '<p>给定一个只包含大写英文字母的字符串S，要求你给出对S重新排列的所有不相同的排列数。<br />如：S为ABA，则不同的排列有ABA、AAB、BAA三种。</p><p>输入一个长度不超过10的字符串S，我们确保都是大写的。</p><p>输出S重新排列的所有不相同的排列数（包含自己本身）。</p>', '["Combinatorics"]', null, 67957, 44988, '[{"input":"ABA\\n","output":"3"},{"input":"ABCDEFGHHA","output":"907200"},{"input":"AABBCC","output":"90"}]', '{"timeLimit":5000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:42', '2024-08-28 17:11:42', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (31, '整数拆分', '给定一个正整数，我们可以定义出下面的公式:
N=a[1]+a[2]+a[3]+…+a[m];
a[i]>0,1<=m<=N;
对于一个正整数，求解满足上面公式的所有算式组合，如，对于整数 4 :

4 = 4;
4 = 3 + 1;
4 = 2 + 2;
4 = 2 + 1 + 1;
4 = 1 + 1 + 1 + 1;
所以上面的结果是 5 。 
注意：对于 "4 = 3 + 1" 和 "4 = 1 + 3" ，这两处算式实际上是同一个组合!每个用例中，会有多行输入，每行输入一个正整数，表示要求解的正整数N(1 ≤ N ≤ 120)  。对输入中的每个整数求解答案，并输出一行(回车换行);', '["Math"]', null, 54729, 35397, '[{"input":"4\\n10\\n20","output":"5\\n42\\n627\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:43', '2024-08-28 17:11:43', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (32, '整数拆分 Ver.2', '<p>The problem is, given an positive integer N, we define an equation like this:</p><pre><code>N=a[1]+a[2]+a[3]+...+a[m];
a[i]&gt;0,1&lt;=m&lt;=N;

</code></pre><p>For example, assume N is 5, we can find:</p><pre><code>5=1+1+1+1+1
5=1+1+1+2
5=1+1+3
5=1+2+2
5=1+4
5=2+3
5=5
</code></pre><p>Note that &quot;5 = 3 + 2&quot; and &quot;5 = 2 + 3&quot; is the same in this problem. Now, you do it!&quot;<br />But now , you must output all the equations in <strong style="">lexicographical</strong> order;</p><p>The input contains several test cases. Each test case contains a positive integer N(1&lt;=N&lt;=20) which is mentioned above. The input is terminated by the end of file.</p><p>For each test case, you have to output several lines indicate the different equations you have found.</p>', '["Math"]', null, 32643, 26373, '[{"input":"3\\n4","output":"3=1+1+1\\n3=1+2\\n3=3\\n4=1+1+1+1\\n4=1+1+2\\n4=1+3\\n4=2+2\\n4=4\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:43', '2024-08-28 17:11:43', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (33, '螺旋队列', '<pre><code>21 22......
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13
</code></pre><p>看清楚以上数字排列的规律，设1点坐标为(0,0)，x方向向右为正，y方向向下为正。例如7的坐标为(-1,-1)，2的坐标为(1,0)，3的坐标为(1,1)。<br />编程实现输入任意坐标(x,y)，输出对应的数字。</p><p>输入包含多组测试，每组测试占一行，包含两个整数x,y , (-100 ≤ x, y ≤ 100), <b>输入到文件末尾结束</b>。</p><p>输出对应的数字，每组测试占一行。</p>', '["Math"]', null, 36267, 25084, '[{"input":"0 0\\n-1 -1","output":"1\\n7\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:43', '2024-08-28 17:11:43', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (35, 'Reversal', '<p>输入一个英文句子，句子包含若干个单词，每个单词间有一个空格。现在你需要将句子中的每个单词逆置，然后输出单词逆置后的句子（不改变之前单词的顺序）。</p><p>输入只有一行，包含一个长度都不超过100的字符串S，表示英文句子。</p><p>输出只有一行，即按要求输出处理后的英文句子。</p>', '["String"]', null, 63762, 51783, '[{"input":"Who Love Solo\\n","output":"ohW evoL oloS"},{"input":"ohW evoL oloS","output":"Who Love Solo"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:44', '2024-08-28 17:11:44', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (36, 'Calculator Ver.2', '<p>Solo小学二年级了，可是问题又来了，他经常把算术表达式中的括号搞混乱，让老师很是头大，于是老师决定再次雇用你编写一个程序来检验Solo的答案的括号是否完全匹配。<br />注意：(1+2)(23)是括号完全匹配的，((1+2)(23)和((1+2)23则没有完全匹配。</p><p>输入只有一行，即一个长度不超过100的字符串S，表示Solo的算术表达式，（你只需考虑相互之间的括号是否完全匹配，不需考虑表达式的其他合法问题）。<br />注意：S中不一定包含括号。</p><p>若表达式的括号完全匹配了则输出“YES”，否则输出“NO”。</p>', '["Data Structures"]', null, 43892, 28519, '[{"input":"5.6*(-2*(1+(-3)))\\n","output":"YES\\n"},{"input":"-2","output":"YES"},{"input":"1+2)","output":"NO"},{"input":"(1+2))(","output":"NO"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:44', '2024-08-28 17:11:44', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (37, 'Matrix', '<p>现在你面对一个n×m的矩阵，矩阵中的每一个元素都是一个整数，现在你需要计算从矩阵的左上角走到右下角所走过的所有元素相加的最大和。<br />注意：只能向右或者向下走，不能走出边界。</p><p>输入第一行包含两个用空格分开的整数n (1≤ n ≤ 100)和m (1≤ m ≤ 100)，表示n行m列的矩阵；接下来是n行每行包含m个用空格分开的非负的整数A (0 ≤ A ≤ 100)。</p><p>输出从矩阵的左上角走到右下角所走过的所有元素相加的最大和。</p>', '["DFS and Similar"]', null, 43319, 36022, '[{"input":"2 3\\n1 2 3\\n1 0 2","output":"8"},{"input":"5 3\\n14 14 4\\n76 5 76\\n78 23 23\\n45 75 53\\n52 43 71","output":"412"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:44', '2024-08-28 17:11:44', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (38, 'Mary的烦恼', '<p>昨天是三八妇女节，在尧山食堂中央举办了一个活动所有的女童鞋可以再此免费拿走自己想要的物品。由于时间紧迫，Mary决定要将自己的背包装满。由于物品较多，且每个物品都有自己的重量，而Mary的背包只能承受固定的重量，她很烦恼如何才能装满自己的包包，所以现在交给你来将Mary的背包装满吧。</p><p>注意：每种物品只能选一次，不考虑包的空间大小。</p><p>输入第一行包含两个空格分开的整数N(1≤ N ≤ 100)和S(1≤ S ≤ 1000)，现场有N个物品和Mary的背包最多只能装S千克的物品；第二行是N个正整数W<sub>i</sub>(0 &lt; W<sub>i</sub> ≤ 100)，表示每个物品的重量(单位千克)。</p><p>若能将Mary的背包装满则输出“YES”，否则输出“NO”。</p>', '["函数返回值"]', null, 47668, 27365, '[{"input":"7 15\\n1 4 3 4 5 2 7","output":"YES"},{"input":"4 38\\n20 24 24 44","output":"NO"},{"input":"9 81\\n8 37 29 19 35 49 9 34 8","output":"YES"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:45', '2024-08-28 17:11:45', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (39, '24点游戏', '<p>大家都玩过扑克牌(A,2,3...T,J,Q,K)，我们使用T来表示10，且A取值1，J取值11，Q取值12，K取值13，你的任务是判断给定四张牌，能否通过加减乘除四种运算，使得最后的结果是24。<br />若四张牌为A、5、8、J，则可以这么计算5+J+(A*8)=24。</p><p>输入四个字符表示四张牌(A,2,3...T,J,Q,K)，用空格隔开。输入到文件末尾结束。</p><p>若能计算出24，输出&quot;Yes”，否则输出&quot;No&quot;。</p>', '["DFS and Similar"]', null, 37049, 30896, '[{"input":"A 5 5 5\\nA A A A","output":"Yes\\nNo\\n"}]', '{"timeLimit":5000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:45', '2024-08-28 17:11:45', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (40, '超级计算器', '<p>Jungle不喜欢计算，所以他希望拥有一个万能的计算器，能够计算表达式的值，你来帮他写吧！</p><p>输入一个包含四则运算、小括号的表达式，如：4+2，或((((2+3)\\*2+4.02)\\*4)+2)\\*4。<b>输入包含多组数据</b>，我们确保没有非法表达式。当一行中只有0时输入结束，相应的结果不要输出。</p><p>对每个测试用例输出1行，即该表达式的值，精确到小数点后2位，如输入是1+2+3，则输出6.00。</p>', '["Data Structures"]', null, 23387, 19917, '[{"input":"-2\\n5.6*(-2*(1+(-3)))\\n2*((4+2)*5)-7/11\\n1+2+3\\n0","output":"-2.00\\n22.40\\n59.36\\n6.00\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:45', '2024-08-28 17:11:45', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (41, '简单二进制', '<p>这回你的任务很简单，就是简单的数数，不过是在二进制下计算哦，计算一个十进制数的二进制包含多少个1.<br />如3的二进制是11，则包含2个1，2的二进制是10，则包含1个1.</p><p>输入包含多组测试，每组测试输入一个整数n(0≤ n &lt;65535)，<b>输入到文件末尾结束</b>。</p><p>输出n的二进制含有1的个数，每组测试占一行。</p>', '["XOR","Binary"]', null, 41316, 35987, '[{"input":"3\\n10","output":"2\\n2\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:46', '2024-08-28 17:11:46', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (42, 'Pairs of Numbers', '<p>Let&#039;s assume that we have a pair of numbers (a,b). We can get a new pair (a+b,b) or (a,a+b) from the given pair in a single step.</p><p>Let the initial pair of numbers be (1,1). Your task is to find number k, that is, the least number of steps needed to transform (1,1) into the pair where at least one number equals n.</p><p>The input contains the only integer n (1 ≤ n ≤ 10<sup>6</sup>).<b>Process to the end of file</b>.</p><p>Print the only integer k.</p>', '["DFS and Similar"]', null, 35382, 15376, '[{"input":"5\\n1","output":"3\\n0\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:46', '2024-08-28 17:11:46', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (44, 'Calculate the Sum', '<p>As you all know, MOD is a mathematical operatio. Giving you two numbers n,m(0 &lt; m,n ≤ 10<sup>10001</sup>)，Your task is to calculate the sum of every digit of m MOD every digit of n. We can guarantee that there is no zero in digits of n. </p><p>The first line, a integer T, representing T test cases blew.(T ≤ 10).<br />In each case, the first line is the integer m, the second line is the integer n.</p><p>Print the sum of every digit of m MOD every digit of n.</p>', '["Math"]', null, 22477, 14640, '[{"input":"1\\n13\\n21","output":"2\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:46', '2024-08-28 17:11:46', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (45, 'Parentheses', '<p>Given a string of parentheses, you must turn it into a well formed string by inserting as few parentheses as possible, at any position (you cannot delete or change any of the existing parentheses).</p><p>A well formed string of parentheses is defined by the following rules: </p><pre><code>-The empty string is well formed. 
-If s is a well formed string, (s) is a well formed string. 
-If s and t are well formed strings, their concatenation st is a well formed string.
</code></pre><p>As examples, &quot;(()())&quot;, &quot;&quot; and &quot;(())()&quot; are well formed strings and &quot;())(&quot;, &quot;()(&quot; and &quot;)&quot; are malformed strings.</p><p>Input a string par of parentheses,and the par will contain between 1 and 60 characters, inclusive.Each character of par will be an opening or closing parenthesis, i.e., &#039;(&#039; or &#039;)&#039;. <b>Proccess to the end of file.</b></p><p>Output the minimum number of parentheses that need to be inserted to make it into a well formed string.</p>', '["String"]', null, 29284, 22974, '[{"input":"(()(()\\n(())","output":"2\\n0\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:47', '2024-08-28 17:11:47', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (46, '全排列', '<p>给定一个整数n，输出1-n的全排列。</p><p>每个测试文件只有一个数据，输入一个整数n(0&lt;n&le;8)。</p><p>输出全排列(<b style="">每个排列中的数字用空格隔开</b>)，且每组排列注意按字典序输出所有排列（即要先输出123才能输出132，而不能先输出132在输出123）。</p>', '["Math"]', null, 34474, 27858, '[{"input":"3","output":"1 2 3\\n1 3 2\\n2 1 3\\n2 3 1\\n3 1 2\\n3 2 1"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:47', '2024-08-28 17:11:47', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (47, 'n选m', '<p>给定两个整数n、m ，输出从(1,2,...,n)中选出m个数的所有组合。</p><p>每个测试文件含有多个数据，输入两个整数n,m(0&lt;m≤n≤10)。<b>输入到文件末尾结束。</b></p><p>输出对应的组合数，每个组合中的数字由小到大排列，对于每组数据的所有组合按字典序排序。</p>', '["Math"]', null, 27279, 21233, '[{"input":"3 2\\n3 1","output":"1 2\\n1 3\\n2 3\\n1\\n2\\n3\\n"},{"input":"4 4","output":"1 2 3 4\\n"},{"input":"4 3","output":"1 2 3\\n1 2 4\\n1 3 4\\n2 3 4\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:47', '2024-08-28 17:11:47', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (48, 'Domino piling', '<p>You are given a rectangular board of M×N squares. Also you are given an unlimited number of standard domino pieces of 2×1 squares.<br />You are allowed to rotate the pieces. You are asked to place as many dominoes as possible on the board so as to meet the following conditions:</p><pre><code>1. Each domino completely covers two squares.
2. No two dominoes overlap.
3. Each domino lies entirely inside the board. It is allowed to touch the edges of the board.
</code></pre><p>Find the maximum number of dominoes, which can be placed under these restrictions.</p><p>In a single line you are given two integers M and N — board sizes in squares (1≤M≤N≤16).<b>Process to the end of file.</b></p><p>Output one number — the maximal number of dominoes, which can be placed.</p>', '["Math"]', null, 27590, 24239, '[{"input":"2 4\\n3 3","output":"4\\n4"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:48', '2024-08-28 17:11:48', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (49, 'Epic Game', '<p>Simon and Antisimon play a game. Initially each player receives one fixed positive integer that doesn&#039;t change throughout the game.
<br />Simon receives number a and Antisimon receives number b. They also have a heap of n stones. The players take turns to make a move and Simon starts. During a move a player should take from the heap the number of stones equal to the greatest common divisor of the fixed number he has received and the number of stones left in the heap. A player loses when he cannot take the required number of stones (i. e. the heap has strictly less stones left than one needs to take).
<br />Your task is to determine by the given a, b and n who wins the game.</p><p>The only string contains space-separated integers a, b and n (1≤a,b,n≤100) — the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.<b>Process to end of file.</b></p><p>If Simon wins, print &quot;0&quot; (without the quotes), otherwise print &quot;1&quot; (without the quotes).</p>', '["Implementation"]', null, 17789, 15237, '[{"input":"3 5 9\\n1 1 100\\n","output":"0\\n1\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:48', '2024-08-28 17:11:48', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (50, 'Theatre Square', '<p>Theatre Square in the capital city of Berland has a rectangular shape with the size n×m meters. On the occasion of the city&#039;s anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a×a.</p><p>What is the least number of flagstones needed to pave the Square? It&#039;s allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It&#039;s not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.</p><p>The input contains three positive integer numbers in the first line: n,m and a (1≤n,m,a≤1000000000).<b>Process to end of file.</b></p><p>Write the needed number of flagstones.</p>', '["Math"]', null, 18208, 13400, '[{"input":"6 6 4\\n2 3 2","output":"4\\n2\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:48', '2024-08-28 17:11:48', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (51, '数字金字塔', '<p>输入一个整数n，输出金字塔型的数字，左右对称。<br />如：<br />输入：5<br />输出：</p><pre><code>    1
   121
  12321
 1234321
123454321
</code></pre><p><strong>注意每一行末尾不要输出多余空格</strong></p><p>输入金字塔的高度n（0&lt;n&lt;10），<b>输入到文件末尾结束</b>。</p><p>输出金字塔，具体见样例输出。</p>', '["Number","Array"]', null, 36839, 31484, '[{"input":"3\\n2","output":"  1\\n 121\\n12321\\n 1\\n121\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:49', '2024-08-28 17:11:49', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (52, '字符串相等', '<p>给定两个由大小写字母和空格组成的字符串s1和 s2，它们的长度都不超过 100 个字符。判断压缩掉空格、并忽略大小写后，这两个字符串在是否相等。</p><p>输入两个字符串（分两行输入），只包含字母和空格。<b>输入有多组测试，且到文件末尾结束</b>。</p><p>如果两个字符串相等则<b style="">输出&quot;Yes&quot;,否则输出&quot;No&quot;</b>。</p>', '["String"]', null, 62486, 35736, '[{"input":"asdf\\naSDf\\nasdf aaa\\naSdf    aaa","output":"Yes\\nYes\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:49', '2024-08-28 17:11:49', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (53, '螺旋三角', '<pre><code>1  2  3  4  5  6  7  8  9  10
27 28 29 30 31 32 33 34 11
26 45 46 47 48 49 35 12
25 44 54 55 50 36 13
24 43 53 51 37 14
23 42 52 38 15
22 41 39 16
21 40 17
20 18
19
</code></pre><p>(这是一个10阶的螺旋三角)看清楚以上图的数字排列的规律了吧，你的任务就是给定任意的n，输出n阶的螺旋三角。</p><p>输入一个整数n(2&lt;n&lt;=10)，<b>输入到文件末尾结束。</b></p><p>输出对应的螺旋三角，每个螺旋三角的<b style="">数字之间</b>有一个空格哦，并不需要像描述中的格式对齐。</p>', '["Math"]', null, 26374, 18512, '[{"input":"10","output":"1 2 3 4 5 6 7 8 9 10\\n27 28 29 30 31 32 33 34 11\\n26 45 46 47 48 49 35 12\\n25 44 54 55 50 36 13\\n24 43 53 51 37 14\\n23 42 52 38 15\\n22 41 39 16\\n21 40 17\\n20 18\\n19\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:49', '2024-08-28 17:11:49', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (54, '整数分解', '<p>给你一个整数n，将它拆分成他所有最小因子（大于1）的连乘形式，同时遵守最小因子优先的原则，小的因子在前面，如n=6，则输出2*3=6。</p><p>测试包含多组数据，每个测试包含一个整数n,(1&lt;n&lt;=1000000)，<b>输入到文件末尾结束</b>。</p><p>每个测试输出一行，即分解的结果。</p>', '["Number"]', null, 47778, 35590, '[{"input":"5\\n6\\n24","output":"5=5\\n2*3=6\\n2*2*2*3=24\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:50', '2024-08-28 17:11:50', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (55, 'Life, the Universe, and Everything', '<p>Your program is to use the brute-force approach in order to find the Answer to Life, the Universe, and Everything. More precisely... rewrite small numbers from input to output. Stop processing input after reading in the number 42.<br />All numbers at input are integers of one or two digits.</p><p>As Sample Input</p><p>As Sample Output</p>', '["Number"]', null, 33544, 30493, '[{"input":"1\\n2\\n88\\n42\\n99\\n","output":"1\\n2\\n88\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:50', '2024-08-28 17:11:50', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (56, '钱币兑换', '<p>在一个国家仅有1分，2分，3分硬币，将钱N分兑换成硬币有很多种兑法。请你编程序计算出共有多少种兑法。</p><p>输入每行包含一个正整数N(0&lt;N&lt;32768)。<b>输入到文件末尾结束。</b></p><p>输出对应的兑换方法数。</p>', '["Math"]', null, 43713, 31396, '[{"input":"3\\n2934\\n","output":"3\\n718831\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:50', '2024-08-28 17:11:50', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (57, 'Phone Number', '<p>We know that if a phone number A is another phone number B’s prefix, B is not able to be called. For an example, A is 123 while B is 12345, after pressing 123, we call A, and not able to call B.<br />Given N phone numbers, your task is to find whether there exits two numbers A and B that A is B’s prefix.</p><p><b>The input consists of several test cases.</b><br />The first line of input in each test case contains one integer N (0&lt;N&lt;1001), represent the number of phone numbers.<br />The next line contains N integers, describing the phone numbers.<br />The last case is followed by a line containing one zero.</p><p>For each test case, if there exits a phone number that cannot be called, print “NO”, otherwise print “YES” instead.</p>', '["Number"]', null, 32658, 20149, '[{"input":"2\\n012\\n012345\\n2\\n12\\n012345\\n0\\n","output":"NO\\nYES\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:51', '2024-08-28 17:11:51', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (58, 'Greatest Number', '<p>Saya likes math, because she think math can make her cleverer.<br />One day, Kudo invited a very simple game:<br />Given N integers, then the players choose no more than four integers from them (can be repeated) and add them together. Finally, the one whose sum is the largest wins the game. It seems very simple, but there is one more condition: the sum shouldn’t larger than a number M.<br />Saya is very interest in this game. She says that since the number of integers is finite, we can enumerate all the selecting and find the largest sum. Saya calls the largest sum Greatest Number (GN). After reflecting for a while, Saya declares that she found the GN and shows her answer.<br />Kudo wants to know whether Saya’s answer is the best, so she comes to you for help.<br />Can you help her to compute the GN?</p><p><b>The input consists of several test cases.</b><br />The first line of input in each test case contains two integers N (0&lt;N≤1000) and M(0&lt;M≤ 1000000000), which represent the number of integers and the upper bound.<br />Each of the next N lines contains the integers. (Not larger than 1000000000)<br />The last case is followed by a line containing two zeros.</p><p>For each case, print the case number (1, 2 …) and the GN.<br />Your output format should imitate the sample output. Print a blank line between each test case.</p>', '["Number"]', null, 24933, 13697, '[{"input":"2 10\\n100\\n2\\n0 0","output":"Case 1: 8\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:51', '2024-08-28 17:11:51', 0);
INSERT INTO coj.question (id, title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, user_id, create_time, update_time, is_delete) VALUES (60, 'Advance Next Round', '<p>有一个比赛，晋级下一轮的规则是：“参赛者如果得分大于0且不小于排名第K的参赛者的得分，将晋级下一轮！”<br />现在已知有n名参赛者(n≥k)，以及他们各自的得分，现在你需要计算将有多少人晋级下一轮。</p><p>输入的第一行包含两个整数n和k(1≤k≤n≤50)，一空格分开。<br />第二行包含n个用空格分开的整数Ai(0≤Ai≤100)，表示排名第i的参赛者的得分。其中对任意的i满足Ai≥Ai+1。</p><p>输出将有多少人晋级下一轮。</p>', '["Implementation"]', null, 44260, 22136, '[{"input":"5 1\\n1 1 1 1 1","output":"5\\n"},{"input":"8 5\\n10 9 8 7 7 7 5 5","output":"6\\n"},{"input":"4 2\\n0 0 0 0","output":"0\\n"}]', '{"timeLimit":1000,"memoryLimit":100,"stackLimit":1000}', 1818857389308248066, '2024-08-28 17:11:51', '2024-08-28 17:11:51', 0);
